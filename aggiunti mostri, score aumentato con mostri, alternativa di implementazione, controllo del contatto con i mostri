<html>

 <head>
     <title>Game</title>
     <script type="text/javascript" src="js/phaser.min.js"></script>
 </head>

 <body>
    <script>

     var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update, render: render });
     
     var canvas;

    var RIGHT = 1, LEFT = 0;

    var player;
    var platforms;
    var cursors;
    var stars, star;
    var background;
    var boxs, box;
    var enemies, enemy; 
    //var enemy=new Array(); //nel codice sarà presente sempre la realizzaz con array o con gruppo in parallelo come in questo caso
    var ground;

    var score = 0;
    var scoreText;

    var milliseconds = 0;
    var seconds = 0;
    var minutes = 0;


    function preload() {
        game.load.image('box', 'assets/box.png');
        game.load.image('forest', 'assets/forest.jpg');
        game.load.image('ground', 'assets/platform.png');
        game.load.image('star', 'assets/star.png');
        game.load.spritesheet('enemy', 'assets/dude.png', 32, 48);
        game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
    }


    function create() {
        game.physics.startSystem(Phaser.Physics.ARCADE);                                   //abilito la fisica
        game.world.setBounds(0, 0, 6000, 600);                                             //imposto l'area di copertura della camera

        background = game.add.tileSprite(0, 0, 800, 600, 'forest');             

        platforms = game.add.group();                                                      //il platform contiene la terra e le due sporgenze su cui possiamo saltare
        platforms.enableBody = true;                                                       //Noi abiliteremo la fisica per tutti gli oggetti che sono stati creati in questo gruppo

        ground = platforms.create(0, game.world.height - 64, 'ground');                    //adesso creiamo il ground
        ground.body.immovable = true;                                                      // questo impedisce la caduta del ground
 
        player = game.add.sprite(0, game.world.height - 150, 'dude');
        game.physics.arcade.enable(player);                                                //abilità la fisica al player

        player.body.bounce.y = 0.2;                                                        /*impostiamo fisica rimbalzo*/
        player.body.gravity.y = 600;                                                        /*impostiamo la gravita*/
        player.body.collideWorldBounds = true;                                             /*impostiamo collisioni*/

        player.animations.add('left', [0, 1, 2, 3], 10, false);                             //animazione cammina a sinistra
        player.animations.add('right', [5, 6, 7, 8], 10, false);                            //animazione cammina a destra


        cursors = game.input.keyboard.createCursorKeys();                                  //creiamo i controlli



             
        enemies = game.add.group();
        enemies.enableBody = true;

        //Creo nemici
        for (var i = 1; i < 3; i++) {
            enemy = enemies.create(i * 700, 0, 'enemy');
            enemy.body.gravity.y = 200; 
            enemy.body.bounce.y = 0.2;
            enemy.body.gravity.y = 500;
            enemy.body.collideWorldBounds = true;
        }

        enemies.callAll('animations.add', 'animations', 'left', [3, 4, 5], 10, true);   //invoco la funzione animations.add come se la stessero chiamando i figli del gruppo   
        enemies.callAll('animations.add', 'animations', 'right', [0, 1, 2], 10, true);
        


        /*
        for (var i = 1; i < 3; i++) {
            enemy[i] = game.add.sprite(i*700, game.world.height - 150, 'enemy');
            game.physics.arcade.enable(enemy[i]);
            enemy[i].body.bounce.y = 0.2;
            enemy[i].body.gravity.y = 500;
            enemy[i].body.collideWorldBounds = true;

            enemy[i].animations.add('left', [3, 4, 5], 10, true);
            enemy[i].animations.add('right', [0, 1, 2], 10, true);
            enemy[i].body.collideWorldBounds = true;
        }
        */


        stars = game.add.group();                                                          //creaiamo il gruppo stars
        stars.enableBody = true;                                                           //abilitiamo tutte le stelle che sono state create in questo gruppo

        boxs = game.add.group();
        boxs.enableBody = true;

        /*Creo le stelle*/
        for (var i = 1; i < 12; i++) {
            star = stars.create(i * 70, 0, 'star'); //creaiamo una star nel gruppo stars
            star.body.gravity.y = 200; //impostiamo il valore della gravita
            star.body.bounce.y = 0.7 + Math.random() * 0.2; //diamo alla stella un valore di rimbalzo casuale
            star.body.collideWorldBounds = true; //utile altrimenti esistono ma non si vedono(si possono applicare bug e forse consuma risorse)

        }

        /*Creo le scatole*/
        for (var i = 1; i < 6; i++) {
            box = boxs.create(1000*i, game.world.height - 50 - 65, 'box');
            //box.body.gravity.y = 300;
            box.body.immovable = true;
        }

        scoreText = game.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#000' });//stampo lo score attuale
        scoreText.fixedToCamera = true;

        background.fixedToCamera = true;                                                   //il background è un elemento fisso per la camera
        ground.fixedToCamera = true;                                                       //il ground è un elemento fisso per la camera
        game.camera.follow(player);                                                        //la camera deve inseguire il giocatore
        game.camera.deadzone = new Phaser.Rectangle(400, 600, 0, 600);
        
        classicalResize();
        canvas = document.getElementsByTagName('body')[0];                                 //prelevo la canvas del gioco
    }

    function update() {
        
        game.physics.arcade.collide(player,platforms); //collisione tra il personaggio e il platform.
        game.physics.arcade.collide(stars, platforms);
        game.physics.arcade.collide(boxs, platforms);
        game.physics.arcade.collide(boxs, player);
        game.physics.arcade.collide(boxs, stars);
        game.physics.arcade.overlap(player, stars, collectStar, null, this); /* se c'è un overlap tra  players e stars viene invocato il metodo collectStar*/

        
        game.physics.arcade.collide(boxs, enemies);
        game.physics.arcade.collide(enemies, platforms);
        //game.physics.arcade.overlap(enemies, player, match, null, this);

        for(var i=0; i<2; i++){
            var currentEnemy=enemies.getAt(i);
            game.physics.arcade.overlap(currentEnemy, player, match, null, this);
        }
        
        /*
        for (var i = 1; i < 3; i++) {
            game.physics.arcade.collide(boxs, enemy[i]);
            game.physics.arcade.collide(enemy[i], platforms);
            game.physics.arcade.overlap(enemy[i], player, match, null, this);
        }
        */

    
        player.body.velocity.x = 0; //reset la velocità del player

        if (onSwipeUp() && player.body.touching.down) {
            player.body.velocity.y = -400
        }

        if (game.input.activePointer.isDown) {
            if (Math.floor(game.input.x / (game.width / 2)) === LEFT) {
                player.body.velocity.x = -150; //Muovi a sinistra
                player.animations.play('left');
            }

            if (Math.floor(game.input.x / (game.width / 2)) === RIGHT) {
                player.body.velocity.x = 150; //Muovi a destra
                player.animations.play('right');
            }
        } else {
            player.animations.stop();
            player.frame = 4;
        }

        if (game.input.activePointer.isUP) {
            player.body.velocity.x = 0;
        }



        if (cursors.left.isDown) {
            player.body.velocity.x = -150; //Muovi a sinistra
            player.animations.play('left');
        }
        else if (cursors.right.isDown) {
            player.body.velocity.x = 150; //Muovi a destra
            player.animations.play('right');
        }
        if (cursors.up.isDown && player.body.touching.down) { //permette di saltare se è premuto il tasto verso l'alto
            player.body.velocity.y = -400;
        }

        
        for (var i = 0; i < 2; i++) {
            var posEnemyX = enemies.getAt(i).x;
            if (posEnemyX <= (i+1) * 700) {
                enemies.getAt(i).body.velocity.x = 80;
                enemies.getAt(i).animations.play('right');
            }
            if (posEnemyX >= (i+1) * 880) {
                enemies.getAt(i).body.velocity.x = -80;
                enemies.getAt(i).animations.play('left');
            }
        }
        
        /*
        for (var i = 1; i < 3; i++){
            var posEnemyX = enemy[i].position.x;
            if (posEnemyX <= i*700) {
                enemy[i].body.velocity.x = 80;
                enemy[i].animations.play('right');
            }
            if (posEnemyX >= i*880) {
                enemy[i].body.velocity.x = -80;
                enemy[i].animations.play('left');
            }

        }
        */
        



        background.tilePosition.x = -game.camera.x; //aggiorno la posizione del background

        //clearAll(stars, enemy); //i nemici e le stelle non ci saranno più se ritorno indietro

        clearAll(stars, enemies); //i nemici e le stelle non ci saranno più se ritorno indietro
        
    }

    function onSwipeUp() {
        return ((game.input.activePointer.positionDown.y-game.input.activePointer.position.y) > 150 && game.input.activePointer.duration > 100 && game.input.activePointer.duration < 250);
    }

    function render() {
        game.debug.cameraInfo(game.camera, 32, 32);
        game.debug.spriteCoords(player, 32, 200);
    }

    function classicalResize() {
        ground.scale.setTo(5, 5);
    }
 
    function collectStar(player, star) {
        star.kill(); //rimuove la stella in cui c'è stato l'overlap.
        score += 10; //aumento lo score di 10 punti
        scoreText.text = 'Score: ' + score; //inserisco un nuovo valore nella scritta
    }

    function match(enemy, player) {
        if (player.position.y < enemy.position.y) {
            enemy.kill();
            score += 20;//aumento di 20 punti
            scoreText.text = 'Score: ' + score; //inserisco un nuovo valore nella scritta
        } else {
            player.kill();
            alert("Hai perso!");
            location.reload();
        }
    }

    //function clearAll(stars, enemy) {
    function clearAll(stars, enemies) {
        for (var i = 0; i < 11; i++) {
            var posStarX = stars.getAt(i).x;
            if (game.camera.x > posStarX) {
                stars.getAt(i).kill();
            }
        }
        /*
        for (var i = 1; i < 3; i++) {
            var posEnemyX = enemy[i].x;
               if (game.camera.x > posEnemyX) {
                   enemy[i].kill();
               }
        }
        */
        for (var i = 0; i < 2; i++) {
            var posEnemyX = enemies.getAt(i).x;
            if (game.camera.x > posEnemyX) {
                enemies.getAt(i).kill();
            }
        }
        
    }


    </script>
  </body>

 </html>
